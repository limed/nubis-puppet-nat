#!/bin/bash
# Steals the nat instance if eni if we are the leader

set -e

# Uncomment for debugging
# set -x

# amazon linux doesn't export /usr/local
export PATH=/usr/local/bin:$PATH

[ -e /usr/local/lib/nubis/nubis-lib.sh ] && . /usr/local/lib/nubis/nubis-lib.sh || exit 1

# This variables is generated by puppet
NAT_IN_INTERFACE="<%= @nat_in_interface %>"
NAT_OUT_INTERFACE="<%= @nat_out_interface %>"

REGION=$(get_region)

function process_KILL() {
    echo 'Got signal SIGKILL'
    exit 0
}

function get_vpc_id() {
    local mac_addr=$(__get_mac eth0)
    local vpc_id=$(curl --retry 5 -s -fq "http://169.254.169.254/latest/meta-data/network/interfaces/macs/${mac_addr}/vpc-id")
    echo "${vpc_id}"
}

function get_rtb_id() {
    if [ -z "$1" ]; then echo "Usage: $FUNCNAME [subnet-id]"; return 1; fi

    local subnet_id=$1
    aws ec2 describe-route-tables \
        --region "${REGION}" \
        --filter \
            Name=association.subnet-id,Values="${subnet_id}" \
        --query \
            'RouteTables[*].RouteTableId' \
        --output text
}

function get_rtb_eni_id() {
    if [ -z "$1" ]; then echo "Usage: $FUNCNAME [subnet-id]"; return 1; fi

    local subnet_id=$1
    aws ec2 describe-route-tables \
        --region "${REGION}" \
        --filter \
            Name=association.subnet-id,Values="${subnet_id}" \
        --query \
          'RouteTables[].Routes[?DestinationCidrBlock == `0.0.0.0/0`].NetworkInterfaceId' \
        --output text
}

function get_main_rtb() {
    if [ -z "$1" ]; then echo "Usage: $FUNCNAME [vpc id]"; return 1; fi

    local vpc_id=$1

    aws ec2 describe-route-tables\
        --region "${region}"\
        --filter \
            Name=vpc-id,Values="${vpc_id}"\
            Name=association.main,Values=true\
        --query \
            'RouteTables[*].RouteTableId'\
        --output text
}

function get_private_subnets() {
    if [ -z "$1" ] ;then echo "Usage: $FUNCNAME [vpc id]"; retrun 1; fi
    local vpc_id=$1

    aws ec2 describe-subnets \
        --region "${REGION}" \
        --filter \
            Name=availability-zone,Values=$(get_availability_zone) \
            Name=vpc-id,Values="${vpc_id}" \
            Name=state,Values=available \
            Name=tag-value,Values='PrivateSubnet*' \
        --query \
            'Subnets[*].SubnetId' \
        --output text
}

function eip_associate() {

    local instance_id=$(get_instance_id)
    local eni_id=$(get_eni_id "${NAT_OUT_INTERFACE}")

    local eip_id=$(nubis-metadata NUBIS_NAT_EIP)

    if [[ -z "${instance_id}" ]]; then
        log "Error: Instance ID not found"
        return 1
    fi

    if [[ -z "${eip_id}" ]]; then
        log "Error: EIP id not found"
        return 1
    fi

    if [[ -z "${eni_id}" ]]; then
        log "Error: ENI id not found"
        return 1
    fi

    aws ec2 associate-address --network-interface-id ${eni_id} --allocation-id ${eip_id} --region "${REGION}"
    local RV=$?

    if [[ ${RV} != 0 ]]; then
        log "ERROR: Unable to associate elastic IP ${eip_id} to instance ${instance_id} (${eni_id})"
        return ${RV}
    else
        # We assume that if return value is not 0 then we have successfully associated an EIP
        log "SUCCESS: Associated ${eip_id} to instance ${instance_id} (${eni_id})"
        return ${RV}
    fi

}

function configure_routes() {

    local instance_id=$(get_instance_id)
    local vpc_id=$(get_vpc_id "${instance_id}")
    local private_subnets=($(get_private_subnets "${vpc_id}"))

    if [ -z "${private_subnets}" ]; then
        log "No private subnet found to modify HA NAT"
        die
    fi

    # Main route table id
    local main_rt=$(get_main_rtb "${vpc_id}")

    # If we have private subnets make sure we iterate through subnet
    for subnet in ${private_subnets[@]}; do
        log "Modifying route table for the following private subnet: ${subnet}"

        local rtb_id=$(get_rtb_id "${subnet}")
        local rtb_eni_id=$(get_rtb_eni_id "${subnet}")

        if [ "${rtb_id}" != "${main_rt}" ]; then
            log "WARNING: "${subnet}" is associated with the VPC main route table. Nat script will not edit Main route table"
        elif [ -z "${rtb_id}" ]; then
            log "WARNING: "${subnet}" is not associated with a route table. Skipping this subnet"
        else
            # If our ENI isn't the default route for that subnet, make it so
            if [ "$rtb_eni_id" != "${ENI_IN_ID}" ]; then
                if [ "$rtb_eni_id" != "" ]; then
                    log "Replacing default route for ${rtb_id} to point to instance ${instance_id} (${ENI_IN_ID})"
                    aws --region "${REGION}" ec2 replace-route --route-table-id "${rtb_id}" --destination-cidr-block 0.0.0.0/0 --network-interface-id "${ENI_IN_ID}"
                else
                    log "Creating default route for ${rtb_id} to point to instance ${instance_id} (${ENI_IN_ID})"
                    aws --region "${REGION}" ec2 create-route --route-table-id "${rtb_id}" --destination-cidr-block 0.0.0.0/0 --network-interface-id "${ENI_IN_ID}"
                fi
            fi
        fi
    done

    local rv=$?
    return ${rv}
}

INSTANCE_ID=$(get_instance_id)

trap process_KILL SIGKILL
while [ true ]; do
    # Only run on elected leader of NAT instances, otherwise we just stop
    consul-do "${NUBIS_PROJECT}/${NUBIS_ENVIRONMENT}/nat-leader" "${INSTANCE_ID}"
    rv=$?
    if [ ${rv} -ne 0 ]; then
        log "Leader change detected, changing routes"
        configure_routes
        log "Leader change detected, associated new eip"
        eip_associate
    fi
    sleep 10
done

exit
