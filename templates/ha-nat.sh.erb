#!/bin/bash
# This script will steal the default route of a vpc is it does not have the consul lock

set -e

# Uncomment for debugging
# set -x

# amazon linux doesn't export /usr/local
export PATH=/usr/local/bin:$PATH

# shellcheck disable=SC1091
[ -e /usr/local/lib/nubis/nubis-lib.sh ] && . /usr/local/lib/nubis/nubis-lib.sh || exit 1

REGION=$(get_region)

function get_vpc_id() {
    local mac_addr
    mac_addr=$(__get_mac eth0)
    local vpc_id
    vpc_id=$(curl --retry 5 -s -fq "http://169.254.169.254/latest/meta-data/network/interfaces/macs/${mac_addr}/vpc-id")
    echo "${vpc_id}"
}

function get_rtb_id() {
    if [ -z "$1" ]; then echo "Usage: ${FUNCNAME[0]} [subnet-id]"; return 1; fi

    local subnet_id=$1
    aws ec2 describe-route-tables \
        --region "${REGION}" \
        --filter \
            Name=association.subnet-id,Values="${subnet_id}" \
        --query \
            'RouteTables[*].RouteTableId' \
        --output text
}

function get_rtb_eni_id() {
    if [ -z "$1" ]; then echo "Usage: ${FUNCNAME[0]} [subnet-id]"; return 1; fi

    local subnet_id=$1
    aws ec2 describe-route-tables \
        --region "${REGION}" \
        --filter \
            Name=association.subnet-id,Values="${subnet_id}" \
        --query \
            "RouteTables[].Routes[?DestinationCidrBlock == \`0.0.0.0/0\`].NetworkInterfaceId" \
        --output text
}

function get_main_rtb() {
    if [ -z "$1" ]; then echo "Usage: ${FUNCNAME[0]} [vpc id]"; return 1; fi

    local vpc_id=$1

    aws ec2 describe-route-tables\
        --region "${REGION}"\
        --filter \
            Name=vpc-id,Values="${vpc_id}"\
            Name=association.main,Values=true\
        --query \
            "RouteTables[*].RouteTableId"\
        --output text
}

function get_private_subnets() {
    if [ -z "$1" ] ;then echo "Usage: ${FUNCNAME[0]} [vpc id]"; return 1; fi
    local vpc_id=$1

    aws ec2 describe-subnets \
        --region "${REGION}" \
        --filter \
            Name=vpc-id,Values="${vpc_id}" \
            Name=state,Values=available \
            Name=tag:Name,Values='PrivateSubnet*' \
        --query \
            'Subnets[*].SubnetId' \
        --output text
}

function configure_routes() {

    local instance_id
    instance_id=$(get_instance_id)

    local vpc_id
    vpc_id=$(get_vpc_id "${instance_id}")

    local private_subnets
    # shellcheck disable=SC2207
    private_subnets=($(get_private_subnets "${vpc_id}"))

    local eni_in_id
    eni_in_id=$(get_eni_id '<%= @nat_in_interface %>')

    if [ "${#private_subnets[@]}" == 0 ]; then
        log "No private subnet found to modify HA NAT"
        die
    fi

    # Main route table id
    local main_rt
    main_rt=$(get_main_rtb "${vpc_id}")

    # If we have private subnets make sure we iterate through subnet
    for subnet in "${private_subnets[@]}"; do
        log "Modifying route table for the following private subnet: ${subnet}"

        local rtb_id
        rtb_id=$(get_rtb_id "${subnet}")

        local rtb_eni_id
        rtb_eni_id=$(get_rtb_eni_id "${subnet}")

        if [ "${rtb_id}" == "${main_rt}" ]; then
            log "WARNING: ${subnet} is associated with the VPC main route table. Nat script will not edit Main route table"
        elif [ -z "${rtb_id}" ]; then
            log "WARNING: ${subnet} is not associated with a route table. Skipping this subnet"
        else
            # If our ENI isn't the default route for that subnet, make it so
            if [ "$rtb_eni_id" != "${eni_in_id}" ]; then
                if [ "$rtb_eni_id" != "" ]; then
                    log "Replacing default route for ${rtb_id} to point to instance ${instance_id} (${eni_in_id})"
                    aws --region "${REGION}" ec2 replace-route --route-table-id "${rtb_id}" --destination-cidr-block 0.0.0.0/0 --network-interface-id "${eni_in_id}"
                else
                    log "Creating default route for ${rtb_id} to point to instance ${instance_id} (${eni_in_id})"
                    aws --region "${REGION}" ec2 create-route --route-table-id "${rtb_id}" --destination-cidr-block 0.0.0.0/0 --network-interface-id "${eni_in_id}"
                fi
            fi
        fi
    done

    local rv=$?
    return ${rv}
}

# Re-exec ourselves under a Consul lock
if [ "${CONSUL_LOCK_REEXEC}" != "true" ]; then
    CONSUL_LOCK_REEXEC="true" exec consul lock "arenas/$(nubis-metadata NUBIS_ARENA)/global/nat/nubis-lock" "$0"
fi

log "Leader change detected, changing routes"
configure_routes
sleep infinity
